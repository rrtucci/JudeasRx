import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec


class Plotter_2z:
    """
    This class has no constructor or attributes. It consists of just static
    methods that plot using matplotlib.

    The plots generated by this class are vertical bar charts for two z (
    i.e., two strata), namely male and female. The class Plotter_nz
    generalizes this class by allowing any number n >= 2 of z's (
    i.e., n strata) and either vertical or horizontal bars.

    """
    @staticmethod
    def plot_p3_bds(ax, p3_bds_m, p3_bds_f):
        """
        This method plots 3 error bars for the bounds p3_bds_m of PNS3 = (PNS,
        PN, PS) for male patients. Then it plots side-by-side 3
        additional error bars for the bounds p3_bds_f for female patients.

        Parameters
        ----------
        ax : Axes
            an axis from matplotlib
        p3_bds_m : np.array
            [shape=(3, 2)]
            the ouput of bounder_m.get_pns3_bds()
        p3_bds_f : np.array
            [shape=(3, 2)]
            the output of bounder_f.get_pns3_bds()

        Returns
        -------
        None

        """
        bar_width = 0.3
        x_labels = ("PNS", "PN", "PS")
        plt.sca(ax)
        plt.xticks(range(3), x_labels)
        ax.set_ylim(0, 1)
        y_labels = np.arange(0, 1.1, .1)
        ax.set_yticks(y_labels)
        ax.grid(linestyle='--', axis='y')
        ax.set_ylabel('probability')

        bar_centers = np.arange(3) - bar_width/2
        texts = ['(%.2f, %.2f)' % (p3_bds_m[k, 0], p3_bds_m[k, 1]) for k in
              range(3)]
        text_starts = bar_centers - bar_width/2
        ax.bar(bar_centers, p3_bds_m[:, 1]-p3_bds_m[:, 0],
                width=bar_width, bottom=p3_bds_m[:, 0], color='blue')
        for k in range(3):  # ax.text not vectorized
            ax.text(text_starts[k], p3_bds_m[k, 1]+.02, texts[k],
                    size='small', color='blue')

        bar_centers = np.arange(3) + bar_width/2
        texts = ['(%.2f, %.2f)' % (p3_bds_f[k, 0], p3_bds_f[k, 1]) for k in
              range(3)]
        text_starts = bar_centers - bar_width/2
        ax.bar(bar_centers, p3_bds_f[:, 1]-p3_bds_f[:, 0],
                width=bar_width, bottom=p3_bds_f[:, 0], color='hotpink')
        for k in range(3):  # ax.text not vectorized
            ax.text(text_starts[k], p3_bds_f[k, 1]+.02, texts[k],
                    size='small', color='hotpink')

        ax.legend(['male', 'female'])
        
    @staticmethod
    def plot_eu_bds(ax, eu_bds_m, eu_bds_f):
        """
        This method plots an error bar for the bounds eu_bds_m for male
        patients, and then it plots another error bar for the bounds eu_bds_f
        for female patients.

        Parameters
        ----------
        ax : Axes
            an axis from matplotlib
        eu_bds_m : np.array
            [shape=(2,)]
            the ouput of bounder_m.get_eu_bds()
        eu_bds_f : np.array
            [shape=(2,)]
            the output of bounder_f.get_eu_bds()


        Returns
        -------
        None

        """
        bar_width = 1
        plt.sca(ax)
        plt.xticks([0], ["EU"])
        ax.set_ylim(-1, 1)
        y_labels = np.arange(-1, 1.1, .2)
        ax.set_yticks(y_labels)
        ax.grid(linestyle='--', axis='y')
        ax.set_ylabel('utility')

        ax.bar(- bar_width/2, eu_bds_m[1]-eu_bds_m[0],
                width=bar_width, bottom=eu_bds_m[0], color='blue')
        txt = '(%.2f, %.2f)' % (eu_bds_m[0], eu_bds_m[1])
        ax.text(-bar_width, eu_bds_m[1]+.02, txt, size='small', color='blue')

        ax.bar(bar_width/2, eu_bds_f[1]-eu_bds_f[0],
                width=bar_width, bottom=eu_bds_f[0], color='hotpink')
        txt = '(%.2f, %.2f)' % (eu_bds_f[0], eu_bds_f[1])
        ax.text(0, eu_bds_f[1] + .02, txt, size='small', color='hotpink')

        ax.legend(['male', 'female'])
        ax.axhline(y=0, color='black')

    @staticmethod
    def plot_all(p3_bds_m, p3_bds_f, eu_bds_m, eu_bds_f):
        """
        This method calls both plot_pns3_bds() and plot_eu_bds().

        Parameters
        ----------
        p3_bds_m : np.array
            [shape=(3,2)]
            PNS3 bounds for male patients
        p3_bds_f : np.array
            [shape=(3,2)]
            PNS3 bounds for female patients
        eu_bds_m : np.array
            [shape=(2,)]
            EU bounds for male patients
        eu_bds_f : np.array
            [shape=(2,)]
            Eu bounds for female patients

        Returns
        -------
        None
        """

        plt.figure(figsize=(12, 5))
        gs = gridspec.GridSpec(1, 2, width_ratios=[4, 1])

        ax1 = plt.subplot(gs[0])
        ax2 = plt.subplot(gs[1])
        Plotter_2z.plot_p3_bds(ax1, p3_bds_m, p3_bds_f)
        Plotter_2z.plot_eu_bds(ax2, eu_bds_m, eu_bds_f)
        plt.tight_layout()
        plt.show()

    # staticmethod
    # def thicken_line(p3_bds_z):
    #     """
    #
    #     Parameters
    #     ----------
    #     p3_bds_z : np.array
    #       [shape=(3, 2)]
    #
    #     Returns
    #     -------
    #     np.array
    #       [shape=(3, 2)]
    #
    #     """
    #     assert p3_bds_z.shape == (3, 2)
    #     thick_bds = np.array(p3_bds_z)
    #     for row in range(3):
    #         if abs(thick_bds[row, 1] -thick_bds[row, 0])< 1e-6:
    #             if abs(thick_bds[row, 0] -1) <1e-6:
    #                 thick_bds[row, 1] = .99
    #             elif abs(thick_bds[row, 1]) < 1e-6:
    #                 thick_bds[row, 0] = .01
    #             else:
    #                 thick_bds[row, 0] += .01
    #     return thick_bds


if __name__ == "__main__":

    def main():
        p3_bds_m = np.array([[.3, .3],
                         [.2, .45],
                         [.5, .68]])
        p3_bds_f = np.array([[.35, .45],
                          [.25, .55],
                          [.55, .72]])
        eu_bds_m = np.array([-.4, .8])
        eu_bds_f = np.array([0, .5])

        Plotter_2z.plot_all(p3_bds_m, p3_bds_f, eu_bds_m, eu_bds_f)

    main()
